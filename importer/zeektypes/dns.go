package zeektypes

// EntryTypeDNS should be matched against zeekFile.EntryType()
// before using OpenZeekReader[ZeekDNS](fs, zeekFile) to read from the file.
const EntryTypeDNS = "dns"

// DNS provides a data structure for entries in the zeek DNS log
type DNS struct {
	// TimeStamp of this connection
	TimeStamp Timestamp `zeek:"ts" zeektype:"time" json:"ts"`
	// UID is the Unique Id for this connection (generated by zeek)
	UID string `zeek:"uid" zeektype:"string" json:"uid"`
	// Source is the source address for this connection
	Source string `zeek:"id.orig_h" zeektype:"addr" json:"id.orig_h"`
	// SourcePort is the source port of this connection
	SourcePort int `zeek:"id.orig_p" zeektype:"port" json:"id.orig_p"`
	// Destination is the destination of the connection
	Destination string `zeek:"id.resp_h" zeektype:"addr" json:"id.resp_h"`
	// DestinationPort is the port at the destination host
	DestinationPort int `zeek:"id.resp_p" zeektype:"port" json:"id.resp_p"`
	// Proto is the string protocol identifier for this connection
	Proto string `zeek:"proto" zeektype:"enum" json:"proto"`
	// TransID contains a 16 bit identifier assigned by the program that generated the query
	TransID int64 `zeek:"trans_id" zeektype:"count" json:"trans_id"`
	// RTT contains the round trip time of this request / response
	RTT float64 `zeek:"rtt" zeektype:"interval" json:"rtt"`
	// Query contains the query string
	Query string `zeek:"query" zeektype:"string" json:"query"`
	// QClass contains a the qclass of the query
	QClass int64 `zeek:"qclass" zeektype:"count" json:"qclass"`
	// QClassName contains a descriptive name for the query
	QClassName string `zeek:"qclass_name" zeektype:"string" json:"qclass_name"`
	// QType contains the value of the query type
	QType int64 `zeek:"qtype" zeektype:"count" json:"qtype"`
	// QTypeName provides a descriptive name for the query
	QTypeName string `zeek:"qtype_name" zeektype:"string" json:"qtype_name"`
	// RCode contains the response code value from the DNS messages
	RCode int64 `zeek:"rcode" zeektype:"count" json:"rcode"`
	// RCodeName provides a descriptive name for RCode
	RCodeName string `zeek:"rcode_name" zeektype:"string" json:"rcode_name"`
	// AA represents the state of the authoritive answer bit of the resp messages
	AA bool `bson:"AA" zeek:"AA" zeektype:"bool" json:"AA"`
	// TC represents the truncation bit of the message
	TC bool `bson:"TC" zeek:"TC" zeektype:"bool" json:"TC"`
	// RD represens the recursion desired bit of the message
	RD bool `bson:"RD" zeek:"RD" zeektype:"bool" json:"RD"`
	// RA represents the recursion available bit of the message
	RA bool `bson:"RA" zeek:"RA" zeektype:"bool" json:"RA"`
	// Z represents the state of a reseverd field that should be zero in qll queries
	Z int64 `bson:"Z" zeek:"Z" zeektype:"count" json:"Z"`
	// Answers contains the set of resource descriptions in the query answer
	Answers []string `zeek:"answers" zeektype:"vector[string]" json:"answers"`
	// TTLs contains a vector of interval type time to live values
	TTLs []float64 `bson:"TTLs" zeek:"TTLs" zeektype:"vector[interval]" json:"TTLs"`
	// Rejected indicates if this query was rejected or not
	Rejected bool `zeek:"rejected" zeektype:"bool" json:"rejected"`
	// AgentHostname names which sensor recorded this event. Only set when combining logs from multiple sensors.
	AgentHostname string `zeek:"agent_hostname" zeektype:"string" json:"agent_hostname"`
	// AgentUUID identifies which sensor recorded this event. Only set when combining logs from multiple sensors.
	AgentUUID string `zeek:"agent_uuid" zeektype:"string" json:"agent_uuid"`
	// Path of log file containing this record
	LogPath string
}

func (d *DNS) SetLogPath(path string) { d.LogPath = path }
