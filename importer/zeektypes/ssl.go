package zeektypes

// EntryTypeSSL should be matched against zeekFile.EntryType()
// before using OpenZeekReader[ZeekSSL](fs, zeekFile) to read from the file.
const EntryTypeSSL = "ssl"

// SSL provides a data structure for zeek's connection data
type SSL struct {
	// TimeStamp of this connection
	TimeStamp Timestamp `zeek:"ts" zeektype:"time" json:"ts"`
	// UID is the Unique Id for this connection (generated by zeek)
	UID string `zeek:"uid" zeektype:"string" json:"uid"`
	// Source is the source address for this connection
	Source string `zeek:"id.orig_h" zeektype:"addr" json:"id.orig_h"`
	// SourcePort is the source port of this connection
	SourcePort int `zeek:"id.orig_p" zeektype:"port" json:"id.orig_p"`
	// Destination is the destination of the connection
	Destination string `zeek:"id.resp_h" zeektype:"addr" json:"id.resp_h"`
	// DestinationPort is the port at the destination host
	DestinationPort int `zeek:"id.resp_p" zeektype:"port" json:"id.resp_p"`
	// VersionNum  : Numeric SSL/TLS version that the server chose
	VersionNum int `zeek:"version_num" zeektype:"count" json:"version_num"`
	// Version : SSL/TLS version that the server chose
	Version string `zeek:"version" zeektype:"string" json:"version"`
	// Cipher : SSL/TLS cipher suite that the server chose
	Cipher string `zeek:"cipher" zeektype:"string" json:"cipher"`
	// Curve : Elliptic curve the server chose when using ECDH/ECDHE
	Curve string `zeek:"curve" zeektype:"string" json:"curve"`
	// ServerName : Value of the Server Name Indicator SSL/TLS extension.
	// It indicates the server name that the client was requesting.
	ServerName string `zeek:"server_name" zeektype:"string" json:"server_name"`
	// SessionID : Session ID offered by the client for session resumption.
	// Not used for logging.
	SessionID string `zeek:"session_id" zeektype:"string" json:"session_id"`
	// Resumed : Flag to indicate if the session was resumed reusing the key
	// material exchanged in an earlier connection
	Resumed bool `zeek:"resumed" zeektype:"bool" json:"resumed"`
	// ClientTicketEmptySessionSeen : Flag to indicate if we saw a non-empty
	// session ticket being sent by the client using an empty session ID.
	// This value is used to determine if a session is being resumed.
	// It’s not logged.  Note: may not be present in older zeek versions.
	ClientTicketEmptySessionSeen bool `zeek:"client_ticket_empty_session_seen" zeektype:"bool" json:"client_ticket_empty_session_seen"`
	// ClientKeyExchangeSeen :Flag to indicate if we saw a client key exchange
	// message sent by the client. This value is used to determine if a session
	// is being resumed. It’s not logged.
	// Note: may not be present in older zeek versions.
	ClientKeyExchangeSeen bool `zeek:"client_key_exchange_seen" zeektype:"bool" json:"client_key_exchange_seen"`
	// ServerAppData : Count to track if the server already sent an application
	// data packet for TLS 1.3. Used to track when a session was established
	// Note: may not be present in older zeek versions.
	ServerAppData int `zeek:"server_appdata" zeektype:"count" json:"server_appdata"`
	// ClientAppData : Flag to track if the client already sent an application
	// data packet for TLS 1.3. Used to track when a session was established
	// Note: may not be present in older zeek versions.
	ClientAppData bool `zeek:"client_appdata" zeektype:"bool" json:"client_appdata"`
	// LastAlert : Last alert that was seen during the connection.
	LastAlert string `zeek:"last_alert" zeektype:"string" json:"last_alert"`
	// NextProtocol : Next protocol the server chose using the application layer
	// next protocol extension, if present.
	NextProtocol string `zeek:"next_protocol" zeektype:"string" json:"next_protocol"`
	// AnalyzerID : The analyzer ID used for the analyzer instance attached to
	// each connection. It is not used for logging since it’s a meaningless
	// arbitrary number. Note: may not be present in older zeek versions.
	AnalyzerID int `zeek:"analyzer_id" zeektype:"count" json:"analyzer_id"`
	// Established : Flag to indicate if this ssl session has been established
	// successfully, or if it was aborted during the handshake
	Established bool `zeek:"established" zeektype:"bool" json:"established"`
	// Logged : Flag to indicate if this record already has been logged, to
	// prevent duplicates. Note: may not be present in older zeek versions.
	Logged bool `zeek:"logged" zeektype:"bool" json:"logged"`
	// CertChainFuids
	CertChainFuids []string `zeek:"cert_chain_fuids" zeektype:"vector[string]" json:"cert_chain_fuids"`
	// ClientCertChainFuids
	ClientCertChainFuids []string `zeek:"client_cert_chain_fuids" zeektype:"vector[string]" json:"client_cert_chain_fuids"`
	// Subject
	Subject string `zeek:"subject" zeektype:"string" json:"subject"`
	// Issuer
	Issuer string `zeek:"issuer" zeektype:"string" json:"issuer"`
	// ClientSubject
	ClientSubject string `zeek:"client_subject" zeektype:"string" json:"client_subject"`
	// ClientIssuer
	ClientIssuer string `zeek:"client_issuer" zeektype:"string" json:"client_issuer"`
	// ValidationStatus
	ValidationStatus string `zeek:"validation_status" zeektype:"string" json:"validation_status"`
	// ValidationCode  : Numeric SSL/TLS version that the server chose
	ValidationCode int `zeek:"validation_code" zeektype:"int" json:"validation_code"`
	// JA3 client hash
	JA3 string `bson:"ja3" zeek:"ja3" zeektype:"string" json:"ja3"`
	// JA3S server hash
	JA3S string `bson:"ja3s" zeek:"ja3s" zeektype:"string" json:"ja3s"`
	// AgentHostname names which sensor recorded this event. Only set when combining logs from multiple sensors.
	AgentHostname string `zeek:"agent_hostname" zeektype:"string" json:"agent_hostname"`
	// AgentUUID identifies which sensor recorded this event. Only set when combining logs from multiple sensors.
	AgentUUID string `zeek:"agent_uuid" zeektype:"string" json:"agent_uuid"`
	// Path of log file containing this record
	LogPath string
}

func (s *SSL) SetLogPath(path string) { s.LogPath = path }
