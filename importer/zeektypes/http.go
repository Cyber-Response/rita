package zeektypes

// EntryTypeHTTP should be matched against zeekFile.EntryType()
// before using OpenZeekReader[ZeekHTTP](fs, zeekFile) to read from the file.
const EntryTypeHTTP = "http"

// HTTP provides a data structure for entries in zeek's HTTP log file
type HTTP struct {
	// TimeStamp of this connection
	TimeStamp Timestamp `zeek:"ts" zeektype:"time" json:"ts"`
	// UID is the Unique Id for this connection (generated by zeek)
	UID string `zeek:"uid" zeektype:"string" json:"uid"`
	// Source is the source address for this connection
	Source string `zeek:"id.orig_h" zeektype:"addr" json:"id.orig_h"`
	// SourcePort is the source port of this connection
	SourcePort int `zeek:"id.orig_p" zeektype:"port" json:"id.orig_p"`
	// Destination is the destination of the connection
	Destination string `zeek:"id.resp_h" zeektype:"addr" json:"id.resp_h"`
	// DestinationPort is the port at the destination host
	DestinationPort int `zeek:"id.resp_p" zeektype:"port" json:"id.resp_p"`
	// Transdepth is the ordinal value of requests into a pipeline transaction
	TransDepth int64 `zeek:"trans_depth" zeektype:"count" json:"trans_depth"`
	// Method is the request method used
	Method string `zeek:"method" zeektype:"string" json:"method"`
	// Host is the value of the HOST header
	Host string `zeek:"host" zeektype:"string" json:"host"`
	// URI is the uri used in this request
	URI string `zeek:"uri" zeektype:"string" json:"uri"`
	// Referrer is the value of the referrer header in the request
	Referrer string `zeek:"referrer" zeektype:"string" json:"referrer"`
	// Version is the value of version in the request
	Version string `zeek:"version" zeektype:"string" json:"version"`
	// UserAgent gives the user agent from the request
	UserAgent string `zeek:"user_agent" zeektype:"string" json:"user_agent"`
	// Origin gives the value of the origin header from the client
	Origin string `zeek:"origin" zeektype:"string" json:"origin"`
	// ReqLen holds the length of the request body uncompressed
	ReqLen int64 `zeek:"request_body_len" zeektype:"count" json:"request_body_len"`
	// RespLen hodls the length of the response body uncompressed
	RespLen int64 `zeek:"response_body_len" zeektype:"count" json:"response_body_len"`
	// StatusCode holds the status result
	StatusCode int64 `zeek:"status_code" zeektype:"count" json:"status_code"`
	// StatusMsg contains a string status message returned by the server
	StatusMsg string `zeek:"status_msg" zeektype:"string" json:"status_msg"`
	// InfoCode holds the last seen 1xx informational reply code
	InfoCode int64 `zeek:"info_code" zeektype:"count" json:"info_code"`
	// InfoMsg holds the last seen 1xx message string
	InfoMsg string `zeek:"info_msg" zeektype:"string" json:"info_msg"`
	// Tags contains a set of indicators of various attributes related to a particular req and
	// response pair
	// Tags []string `zeek:"tags" zeektype:"set[enum]" json:"tags"`
	// UserName will contain a username in the case of basic auth implementation
	UserName string `zeek:"username" zeektype:"string" json:"username"`
	// Password will contain a password in the case of basic auth implementation
	Password string `zeek:"password" zeektype:"string" json:"password"`
	// Proxied contains all headers that indicate a request was proxied
	Proxied []string `zeek:"proxied" zeektype:"set[string]" json:"proxied"`
	// OrigFuids contains an ordered vector of uniq file IDs
	OrigFuids []string `zeek:"orig_fuids" zeektype:"vector[string]" json:"orig_fuids"`
	// OrigFilenames contains an ordered vector of filenames from the client
	OrigFilenames []string `zeek:"orig_filenames" zeektype:"vector[string]" json:"orig_filenames"`
	// OrigMimeTypes contains an ordered vector of mimetypes
	OrigMimeTypes []string `zeek:"orig_mime_types" zeektype:"vector[string]" json:"orig_mime_types"`
	// RespFuids contains an ordered vector of unique file IDs in the response
	RespFuids []string `zeek:"resp_fuids" zeektype:"vector[string]" json:"resp_fuids"`
	// RespFilenames contains an ordered vector of unique files in the response
	RespFilenames []string `zeek:"resp_filenames" zeektype:"vector[string]" json:"resp_filenames"`
	// RespMimeTypes contains an ordered vector of unique MIME entities in the HTTP response body
	RespMimeTypes []string `zeek:"resp_mime_types" zeektype:"vector[string]" json:"resp_mime_types"`
	// RespMimeTypes contains an ordered vector of unique MIME entities in the HTTP response body
	ClientHeaderNames []string `zeek:"client_header_names" zeektype:"vector[string]" json:"client_header_names"`
	// AgentHostname names which sensor recorded this event. Only set when combining logs from multiple sensors.
	AgentHostname string `zeek:"agent_hostname" zeektype:"string" json:"agent_hostname"`
	// AgentUUID identifies which sensor recorded this event. Only set when combining logs from multiple sensors.
	AgentUUID string `zeek:"agent_uuid" zeektype:"string" json:"agent_uuid"`
	// Path of log file containing this record
	LogPath string
}

func (h *HTTP) SetLogPath(path string) { h.LogPath = path }
